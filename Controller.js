const inquirer = require('inquirer')
const { Vopros, Vopros2 } = require('./vopros')
const { question } = require('readline-sync')
/////////////////////////////////// Очень надеюсь, что это вам поможет и вы осилите мои опусы. Я старалась//////////////////////////
// Оставляю вам комментарии и консоль логи, чтобы вы могли посмотреть что где куда работает. Какие то штуки я буду повторять, не обессудьте
// !!!!!!! не забудьте, что в консоли на автомате запуускается игра, если оно вам не надо, закоменьте нижнюю часть, я там сделала пометку.
// Vopros, Vopros2 - 2функции мы вытащили из текстового файла и подтянули через модули. каждая возвращает массив с вопрос/ответ на опр тему
// Они одинаковые, поэтому я прогоню только одну тему, по факту можно проделать те же действия для Vopros2 и оно будет работать
//console.log(Vopros());

/* класс для удобства/тренировки классов. по факту мы могли расписать всё вручную или каким=нибудь циклом
 Че тут происходит?
В классе есть 2 параметра по умолчанию, они автоматически  будут закидываться внутрь, а массив на вход (с вопрросом и ответом) будет распределяться в question и answ1,2,3
У нас на вход есть массив, где 0 индекс это строка - оно уходит в question и затем в this.message. 
1,2,3 индекс это объекты с ответами, они равны answer1,2,3 и все улетают в this.choices. И я сразу в конструкторе объединяю ответы в массив.
Почему this.message = question, а не this.question = question?
потому что я хотела, чтобы в итоге ключ был такой же, как у образца. т.к не сильно вдавалась в документацию, но увидела, что пакету для работы важны названия ключей. а сверху я написала question, чтобы не запутаться что куда должно падать
*/

class Text {
    constructor([question, answer1, answer2, answer3]) {
        ;(this.type = 'list'),
            (this.name = 'points'),
            (this.message = question),
            (this.choices = [answer1, answer2, answer3])
    }
}
// Лог чтобы посмотреть что там на выходе ваще получается. Лучше потом обратно закоментить
// const example = new Text(Vopros()[0]),
// console.log(example)

// Собственно все то, что приходит из вопроса мы приводим в красивый вид, который нам нужен
// мап берет каждый элемент массива и создает элемент класса, т.е на выходе мы получаем массив из объектов, которые мы со спокойной душой закинем в нашу функцию с модулем
const theme1 = Vopros().map((el) => new Text(el))

// полезные консоль логи

// сравнить было/стало. Здесь конкретный элемент получившегося массива
// Было: массив [str, obj, obj] стало: объект {type, name, mess:'str', choices: [obj, obj, obj]}
//console.log(Vopros()[0])
// console.log(theme1[0]);

// Запуск выбора темы. Промис

// Собственно все это сверху мы делали, чтобы самая мякотка у нас запускалась таким образом))) в 3 строчки
// параметр arr - мы туда закинем наш клевый красивый массив с объектами и оно будет работать
async function qwiz(arr) {
    console.clear() // чистим консоль шобы по красоте было
    console.log('Удачи!')
    let points = 0
    for (el of arr) {
        await inquirer.prompt([el]).then((data) => {
            console.clear() // будем чистить консоль после каждого действия
            points += +data.points // плюсуем очки. Мы могли сделать это через модуль, через редьюс, как угодно, этот вариант самый простой
            console.log(`Набрано очков: ${points}.`) // выводим в консоль
        })
    }
    console.clear()
    console.log(`Поздравляем! Вы набрали ${points} очков!`) // я не буду прописывать ифы для 1очко, 2 очка и тд
}
// если мы хотим запустить эти вопросы вручую. но! в нашей реализации запуск будет через промис ниже)
//qwiz(theme1)

// !!!!!!!если не хотите запускать игру в консоли, закомментируйте код ниже.

inquirer //тут ниже просто оболочка модуля, я особо ничего не переделывала
    .prompt([
        {
            type: 'list',

            name: 'theme',

            message: 'Выберите тему',

            choices: [
                { name: 'Будни БК>', value: 1 },
                { name: 'Продолжи Фразу', value: 0 },
            ],
        },
    ])
    .then((data) =>
        data.theme === 1
            ? qwiz(theme1)
            : console.log('  Сваха, содержанка и... победили!')
    ) //Влад, тебе срочно нужно прозвище.
// в then запускается функция с параметром, который зависит от выбора темы в консоли. (выбирайте Будни БК тк я не стала делать втторую тему)
// Че такое это ваше data.theme? я без понятия! :DD консольными тыками обнаружила, что наша data это новый объект, где ключ это значение name, а значение это value выбранного ответа. Я смирилась и просто сделала изящный костыль.
// Если будут вопросы, вы знаете где меня найти! разумеется я на кухне заедаю стресс булочкой
